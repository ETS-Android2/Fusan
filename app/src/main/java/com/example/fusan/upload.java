package com.example.fusan;import androidx.appcompat.app.AppCompatActivity;import androidx.cardview.widget.CardView;import androidx.core.app.ActivityCompat;import androidx.fragment.app.FragmentManager;import androidx.fragment.app.FragmentTransaction;import androidx.swiperefreshlayout.widget.CircularProgressDrawable;import android.Manifest;import android.app.ProgressDialog;import android.content.Context;import android.content.Intent;import android.content.pm.PackageManager;import android.database.Cursor;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.graphics.Color;import android.media.MediaMetadataRetriever;import android.net.Uri;import android.net.wifi.aware.PublishConfig;import android.os.AsyncTask;import android.os.Build;import android.os.Bundle;import android.provider.MediaStore;import android.util.Log;import android.view.View;import android.view.animation.AlphaAnimation;import android.widget.Button;import android.widget.FrameLayout;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.ProgressBar;import android.widget.TextView;import android.widget.Toast;import com.google.gson.Gson;import java.io.BufferedInputStream;import java.io.BufferedReader;import java.io.ByteArrayOutputStream;import java.io.DataInputStream;import java.io.DataOutputStream;import java.io.EOFException;import java.io.File;import java.io.FileInputStream;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.io.OutputStream;import java.io.PrintWriter;import java.net.Socket;import java.net.UnknownHostException;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Base64;import java.util.Date;import java.util.Locale;import java.util.concurrent.Executor;public class upload extends AppCompatActivity {    private static final int SELECT_VIDEO = 3;    private String selectedPath = "";    public boolean choosen;    public boolean server;    long startTime = 0;    long difference = 0;    CardView card1, card2, card3;    Button choose_video, upload;    TextView status, time;    ProgressBar progress;    TextView connection, sendVideo, algo;    ArrayList<String> faces = new ArrayList<String>();    ArrayList<Integer> timePeriods = new ArrayList<Integer>();    public boolean uploaded = false;    public boolean secondSocket  = false;    public void chooseVideo() {        Intent intent = new Intent();        intent.setType("video/*");        intent.setAction(Intent.ACTION_GET_CONTENT);        startActivityForResult(Intent.createChooser(intent, "Select a Video "), SELECT_VIDEO);    }    @Override    public void onActivityResult(int requestCode, int resultCode, Intent data) {        super.onActivityResult(requestCode,resultCode,data);        if (resultCode == RESULT_OK) {            if (requestCode == SELECT_VIDEO) {                Uri selectedImageUri = data.getData();                selectedPath = getPath(selectedImageUri);                choosen = true;            }        }    }    class UploadVideo extends AsyncTask<String, String, Void>{        String currentTime;        String stat;        String diff;        Socket socket, newSocket;        @Override        protected void onProgressUpdate(String... values) {            super.onProgressUpdate(values);            stat = values[0];            diff = Float.toString(difference).substring(0,1);            if(stat.equals("Server Not Found")){                progress.setVisibility(View.INVISIBLE);            }            if(stat.equals("Connection Established")){                card1.setCardBackgroundColor(Color.parseColor("#66ff66"));                connection.setText(stat);            }            if(stat.equals("Video Sent")){                card2.setCardBackgroundColor(Color.parseColor("#66ff66"));                sendVideo.setText(stat);            }            if(stat.equals("Done")){                card3.setCardBackgroundColor(Color.parseColor("#66ff66"));                algo.setText(stat);            }            status.setText(stat);        }        @Override        protected Void doInBackground(String... strings) {            server = true;            try{                socket  = new Socket("192.168.43.179", 7000);            }catch (Exception e){                server = false;                publishProgress("Server Not Found");            }            try {                try{                    if (server){                        Thread.sleep(1000);                        publishProgress("Connection Established");                        difference = (System.currentTimeMillis() - startTime)/1000;                    }                }catch (Exception e){}                try{                    if(server){                        Thread.sleep(50);                        publishProgress("Sending Video ....");                    }                }catch (Exception e){}                File myFile = new File (strings[0]);                byte [] mybytearray  = new byte [(int)myFile.length()];                FileInputStream fis = new FileInputStream(myFile);                BufferedInputStream bis = new BufferedInputStream(fis);                bis.read(mybytearray,0,mybytearray.length);                OutputStream os = socket.getOutputStream();                os.write(mybytearray,0,mybytearray.length);                os.flush();                os.close();                socket.close();                uploaded = true;                try{                    if(server){                        Thread.sleep(1000);                        publishProgress("Video Sent");                    }                }catch (Exception e){}                try{                    if(server){                        Thread.sleep(1000);                        publishProgress("Running Algo ....");                    }                }catch (Exception e){}            }catch (Exception e){}            try{                newSocket = new Socket("192.168.43.179", 7000);                DataInputStream dataInputStream = new DataInputStream(newSocket.getInputStream());                DataOutputStream dataOutputStream = new DataOutputStream(newSocket.getOutputStream());                String noOfFaces = dataInputStream.readUTF();                int faceCount = Integer.parseInt(noOfFaces);                for(int i = 0; i< faceCount;i++){                    String timePeriod = dataInputStream.readUTF();                    Log.d("Hopee",timePeriod );                    String imageString = dataInputStream.readUTF();                    Log.d("Hopeeee", imageString);                    timePeriods.add(Integer.parseInt(timePeriod));                    faces.add(imageString);                }                try{                    if(server){                        Thread.sleep(1000);                        publishProgress("Done");                    }                }catch (Exception e){}                secondSocket = true;                dataInputStream.close();                newSocket.close();            } catch (Exception e) {                e.printStackTrace();            }            return null;        }        @Override        protected void onPostExecute(Void aVoid) {            super.onPostExecute(aVoid);            if(!server){            }            else if(faces.size() == 0){                Log.d("Res","Im teh resxnmsn");                Toast.makeText(getApplicationContext(), "No Faces Found in the Video", Toast.LENGTH_SHORT);                Intent intent = new Intent(getApplicationContext(), Dashboard.class);                startActivity(intent);                finish();            }            else{                Intent intent = new Intent(getApplicationContext(), most_appeared.class);                intent.putStringArrayListExtra("faces", faces);                intent.putIntegerArrayListExtra("times", timePeriods);                startActivity(intent);                finish();            }        }    }    public String getPath(Uri uri) {        Cursor cursor = getContentResolver().query(uri, null, null, null, null);        cursor.moveToFirst();        String document_id = cursor.getString(0);        document_id = document_id.substring(document_id.lastIndexOf(":") + 1);        cursor.close();        cursor = getContentResolver().query(                android.provider.MediaStore.Video.Media.EXTERNAL_CONTENT_URI,                null, MediaStore.Images.Media._ID + " = ? ", new String[]{document_id}, null);        cursor.moveToFirst();        String path = cursor.getString(cursor.getColumnIndex(MediaStore.Video.Media.DATA));        cursor.close();        return path;    }    public  boolean isStoragePermissionGranted() {        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {            if (checkSelfPermission(android.Manifest.permission.READ_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED) {                return true;            } else {                ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, 1);                return false;            }        }        else {            return true;        }    }    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_upload);        boolean s = isStoragePermissionGranted();        choose_video = findViewById(R.id.chooseVideo);        upload = findViewById(R.id.upload);        progress = findViewById(R.id.progress);        status = findViewById(R.id.statuscard);        time = findViewById(R.id.timeText);        card1 = findViewById(R.id.card1);        card2 = findViewById(R.id.card2);        card3 = findViewById(R.id.card3);        connection = findViewById(R.id.serverConnection);        sendVideo = findViewById(R.id.sendingFrames);        algo = findViewById(R.id.algo);        choose_video.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                choosen = true;                chooseVideo();            }        });        upload.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                progress.setVisibility(View.VISIBLE);                long startTime = System.currentTimeMillis();                if (!choosen){                    status.setText("Choose a video first");                }                else{                    status.setText("Connecting ....");                }                try{                    new UploadVideo().execute(selectedPath);                }catch (Exception e){}            }        });    }}